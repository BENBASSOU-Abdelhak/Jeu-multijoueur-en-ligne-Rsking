# This file is a template, and might need editing before it works on your project.
# use the official gcc image, based on debian
# can use verions as well, like gcc:5.2
# see https://hub.docker.com/_/gcc/
image: ubuntu:20.04

build:
  stage: build
  before_script:
    - export DEBIAN_FRONTEND=noninteractive
    - ln -fs /usr/share/zoneinfo/Europe/Paris /etc/localtime
    - apt update && apt -y install g++ make autoconf cmake libboost-all-dev
  script:
    - mkdir build && cd build
    - cmake -DCMAKE_BUILD_TYPE=Debug ..
    - make
  artifacts:
    paths:
        - build/
    expire_in: 7 days
  
# run tests using the binary built
test:
  stage: test
  before_script:
    - export DEBIAN_FRONTEND=noninteractive
    - ln -fs /usr/share/zoneinfo/Europe/Paris /etc/localtime
    - apt update && apt -y install make cmake python3-pip
    - pip3 install lxml
  dependencies:
    - build
  script:
    - cd build
    - ctest -T test --verbose --no-compress-output --output-on-failure
  after_script:
    - python3 CMakeModules/CTest2JUnit.py build CMakeModules/CTest2JUnit.xsl > junit.xml
  artifacts:
    paths:
      - junit.xml
    reports:
      junit: junit.xml
    expire_in: 7 days

#run coverage
coverage:
  stage: deploy
  before_script:
    - export DEBIAN_FRONTEND=noninteractive
    - ln -fs /usr/share/zoneinfo/Europe/Paris /etc/localtime
    - apt update && apt install -y g++ make autoconf gcovr lcov cmake libboost-all-dev
  script:
    - cmake -DCOVERAGE=ON -DCMAKE_BUILD_TYPE=Debug .
    - make all coverage
    - make all coverage_html
    - mv coverage_html coverage
  artifacts:
    paths:
        - coverage/
    expire_in: 7 days
    reports:
        cobertura: coverage.xml

# generate documentation
doc:
  stage: deploy
  before_script:
    - apt update && apt -y install gcc make autoconf doxygen ruby
    - gem install asciidoctor asciidoctor-pdf --pre
  script:
    - make doc
    - asciidoctor-pdf doc/*.adoc
  artifacts:
    paths:
      - "doc/*.pdf"
    expire_in: 7 days
