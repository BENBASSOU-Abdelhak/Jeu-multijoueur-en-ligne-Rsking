image: $CI_REGISTRY/risking/build-image:master

build:
  stage: build
  before_script: # Trying to fix OpenSSL dev
    - apk add openssl openssl-dev
  script:
    - mkdir build && cd build
    - cmake -DCMAKE_BUILD_TYPE=Debug ..
    - make
  artifacts: # Save artifacts so "test" job can use it
    paths:
      - build/
    expire_in: 2 hours

# run tests using the binary built
test:
  stage: test
  dependencies:
    - build # Download only build artifacts
  before_script: # Trying to fix OpenSSL dev
    - apk add openssl openssl-dev
  script:
    - cd build
    - ctest -T test --verbose --no-compress-output --output-on-failure
  after_script:
    - python3 CMakeModules/CTest2JUnit.py build CMakeModules/CTest2JUnit.xsl > junit.xml
  artifacts:
    paths:
      - junit.xml
    reports:
      junit: junit.xml
    expire_in: 7 days

#run coverage
coverage:
  stage: deploy
  before_script: # Trying to fix OpenSSL dev
    - apk add openssl openssl-dev
  script:
    - cmake -DCOVERAGE=ON -DCMAKE_BUILD_TYPE=Debug .
    - make all coverage
    - make all coverage_html
    - mv coverage_html coverage
    - chmod u+x utils/coverage_report.py
    - python3 utils/coverage_report.py
  artifacts:
    paths:
      - coverage/
    expire_in: 7 days
    reports:
      cobertura: coverage.xml
  coverage: '/COVERAGE PERCENTAGE: ([0-9.]+)/'

# Generate documentation (pdf)
doc_pdf:
  stage: deploy
  before_script:
    - gem install asciidoctor asciidoctor-pdf --pre
  script:
    - asciidoctor-pdf doc/*.adoc
  artifacts:
    paths:
      - "doc/*.pdf"
    expire_in: 7 days

# Upload to Gitlab pages (html)
pages:
  stage: deploy
  before_script:
    - gem install asciidoctor asciidoctor-pdf --pre
  script:
    - asciidoctor doc/*.adoc
    - mkdir -p public
    - mv doc/*.html public/
  artifacts:
    paths:
      - "public/"
    expire_in: 7 days
  only:
    refs:
      - develop

.build_container: &build_container
  stage: deploy
  interruptible: true
  retry:
    when:
      - runner_system_failure
      - stuck_or_timeout_failure
  only:
    refs:
      - develop

# x86 build using Kaniko (no need to be privilegied)
build_container:x86:
  <<: *build_container
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [ "" ]
  variables:
    IMAGE_TAG: $CI_REGISTRY_IMAGE:x86-$CI_COMMIT_REF_SLUG
    CACHE_REPO: $CI_REGISTRY_IMAGE/cache
  script:
    - mkdir -p /kaniko/.docker
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
    - /kaniko/executor --context $CI_PROJECT_DIR --dockerfile $CI_PROJECT_DIR/Dockerfile --cache=true --cache-repo=$CACHE_REPO --destination $IMAGE_TAG

# ARM/v7 build, not supported by Kaniko (we are using host Docker (not exactly dind), see raspberry-pi config and https://gitlab.com/gitlab-org/gitlab-runner/-/issues/4260)
build_container:armv7:
  <<: *build_container
  image: docker:19.03-dind
  variables:
    IMAGE_TAG: $CI_REGISTRY_IMAGE:armv7-$CI_COMMIT_REF_SLUG
  before_script:
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" --password-stdin $CI_REGISTRY
  script:
    - docker pull $IMAGE_TAG || true
    - docker build --cache-from $IMAGE_TAG -t $IMAGE_TAG --progress=plain .
    - docker push $IMAGE_TAG
  tags:
    - arm
    - privileged
