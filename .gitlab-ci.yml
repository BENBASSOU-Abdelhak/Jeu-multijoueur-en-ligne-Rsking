image: $CI_REGISTRY/risking/build-image:master

build:
  stage: build
  before_script:
    - apt update && apt -y install libssl-dev
  script:
    - mkdir build && cd build
    - cmake -DCMAKE_BUILD_TYPE=Debug ..
    - make
  artifacts:
    paths:
      - build/
    expire_in: 7 days

# run tests using the binary built
test:
  stage: test
  needs:
    - build
  before_script:
    - apt update && apt -y install libssl-dev
  script:
    - cd build
    - ctest -T test --verbose --no-compress-output --output-on-failure
  after_script:
    - python3 CMakeModules/CTest2JUnit.py build CMakeModules/CTest2JUnit.xsl > junit.xml
  artifacts:
    paths:
      - junit.xml
    reports:
      junit: junit.xml
    expire_in: 7 days

#run coverage
coverage:
  stage: deploy
  needs:
    - test
  before_script:
    - apt update && apt -y install libssl-dev
  script:
    - cmake -DCOVERAGE=ON -DCMAKE_BUILD_TYPE=Debug .
    - make all coverage
    - make all coverage_html
    - mv coverage_html coverage
    - chmod u+x utils/coverage_report.py
    - python3 utils/coverage_report.py
  artifacts:
    paths:
      - coverage/
    expire_in: 7 days
    reports:
      cobertura: coverage.xml
  coverage: '/COVERAGE PERCENTAGE: ([0-9.]+)/'

# Generate documentation (pdf)
doc_pdf:
  stage: deploy
  needs:
    - test
  before_script:
    - gem install asciidoctor asciidoctor-pdf asciidoctor-diagram --pre
  script:
    - asciidoctor-pdf -r asciidoctor-diagram doc/*.adoc
  artifacts:
    paths:
      - "doc/*.pdf"
    expire_in: 7 days

# Upload to Gitlab pages (html)
pages:
  stage: deploy
  needs:
    - test
  before_script:
    - gem install asciidoctor asciidoctor-pdf asciidoctor-diagram --pre
  script:
    - asciidoctor doc/*.adoc
    - mkdir -p public
    - mv doc/*.html public/
  artifacts:
    paths:
      - "public/"
    expire_in: 7 days
  only:
    refs:
      - develop

build_container:
  stage: deploy
  needs:
    - test
  image:
    name: jonoh/docker-buildx-qemu
  variables:
    DOCKER_HOST: tcp://docker:2375/
    IMAGE_TAG: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG
    CACHE_TAG: $CI_REGISTRY_IMAGE/cache:$CI_COMMIT_REF_SLUG
  services:
    - name: docker:dind
  before_script:
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" --password-stdin $CI_REGISTRY
    # Use docker-container driver to allow useful features (push/multi-platform)
    - docker buildx create --driver docker-container --use
    - docker buildx inspect --bootstrap
    # Pull previous image to populate build cache
    - docker pull $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG || true
  script:
    # Important: Ensures execution of other binary formats is enabled in the kernel
    - update-binfmts --enable
    - docker buildx build --cache-from=type=registry,ref=$CACHE_TAG --cache-to=type=registry,ref=$CACHE_TAG,mode=max --platform linux/amd64,linux/arm/v7 -t $IMAGE_TAG --push --progress=plain .
  interruptible: true
  retry:
    when:
      - runner_system_failure
      - stuck_or_timeout_failure
  tags:
    - docker-privilegied

